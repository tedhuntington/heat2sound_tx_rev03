
heat2sound_tx_rev03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000200  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068a  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b6  00000000  00000000  000008aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000019b  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  00000ffb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__vector_13>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  78:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <atmel_start_init>:
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <system_init>

00000084 <__vector_13>:
  84:	1f 92       	push	r1
  86:	0f 92       	push	r0
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	0f 92       	push	r0
  8c:	11 24       	eor	r1, r1
  8e:	8f 93       	push	r24
  90:	9f 93       	push	r25
  92:	95 b1       	in	r25, 0x05	; 5
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	89 27       	eor	r24, r25
  98:	85 b9       	out	0x05, r24	; 5
  9a:	88 e3       	ldi	r24, 0x38	; 56
  9c:	92 e0       	ldi	r25, 0x02	; 2
  9e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  a2:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
  a6:	9f 91       	pop	r25
  a8:	8f 91       	pop	r24
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <main>:
  b4:	0e 94 40 00 	call	0x80	; 0x80 <atmel_start_init>
  b8:	88 e3       	ldi	r24, 0x38	; 56
  ba:	92 e0       	ldi	r25, 0x02	; 2
  bc:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  c0:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <main+0x10>

000000c6 <system_init>:
  c6:	8f ee       	ldi	r24, 0xEF	; 239
  c8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	14 b8       	out	0x04, r1	; 4
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	9f ef       	ldi	r25, 0xFF	; 255
  d4:	95 b9       	out	0x05, r25	; 5
  d6:	87 b1       	in	r24, 0x07	; 7
  d8:	80 78       	andi	r24, 0x80	; 128
  da:	87 b9       	out	0x07, r24	; 7
  dc:	88 b1       	in	r24, 0x08	; 8
  de:	8f 67       	ori	r24, 0x7F	; 127
  e0:	88 b9       	out	0x08, r24	; 8
  e2:	8a b1       	in	r24, 0x0a	; 10
  e4:	1a b8       	out	0x0a, r1	; 10
  e6:	8b b1       	in	r24, 0x0b	; 11
  e8:	9b b9       	out	0x0b, r25	; 11
  ea:	20 9a       	sbi	0x04, 0	; 4
  ec:	28 98       	cbi	0x05, 0	; 5
  ee:	21 9a       	sbi	0x04, 1	; 4
  f0:	29 98       	cbi	0x05, 1	; 5
  f2:	26 98       	cbi	0x04, 6	; 4
  f4:	2e 98       	cbi	0x05, 6	; 5
  f6:	27 9a       	sbi	0x04, 7	; 4
  f8:	2f 98       	cbi	0x05, 7	; 5
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	60 e8       	ldi	r22, 0x80	; 128
  fe:	81 e6       	ldi	r24, 0x61	; 97
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 88 00 	call	0x110	; 0x110 <protected_write_io>
 106:	13 be       	out	0x33, r1	; 51
 108:	15 be       	out	0x35, r1	; 53
 10a:	78 94       	sei
 10c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <TIMER_0_init>

00000110 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 110:	2f b7       	in	r18, 0x3f	; 63
	cli
 112:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 114:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 116:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 118:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 11a:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 11c:	08 95       	ret

0000011e <TIMER_0_init>:
 11e:	e4 e6       	ldi	r30, 0x64	; 100
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	87 7f       	andi	r24, 0xF7	; 247
 126:	80 83       	st	Z, r24
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 12e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	08 95       	ret

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
